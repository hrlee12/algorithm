package algorithm_practice;


/*
 * 간선 정보 : 인접행렬
 * 노드 방문 확인 -> boolean 배열
 * 가중치 보관 및 정렬 -> 우선순위 큐
 * 
 * 시작 노드는 방문 처리. 
 * 시작 노드에 인접한 노드의 가중치 우선순위 큐에 넣음. 
 * 
 * 
 * 모든 노드를 방문할 때까지 반복
 * 1) 우선순위 큐에서 원소를 하나 빼서 방문처리 함.
 * 2) 뺀 원소에서 인접한 녀석이 방문이 되지 않았다면 우선순위 큐에 가중치 업데이트 시킴
 * 
 * 
 * 그럼... 우선순위 큐에 원소는 어떤 형태로 담을까?
 * 들어가야 할 정보 : 노드 번호, 가중치
 * 
 * 1) 배열 : 좋지. 근데 가중치를 수정할 때 애매하지 않을까?
 * 	해당 정점을 찾기 위해서 탐색해야 됨 
 * 
 * 2) 맵 : 얘가 제일 애매해. 맵이란 거 자체가 원래 원소를 여러개 넣으려고 쓰는건데 우선순위 큐에 넣으면 원소가 하나인 맵을 여러개 만들어야 됨.
 * 	아니 그럼 어차피 하나하나 탐색해야 하는 건 똑같잖아? 
 * 그럼 어떡해 
 */

import java.util.*;
import java.io.*;

public class DijkstraTest {

	public static void main(String[] args) {
		
		
	}

}